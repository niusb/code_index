public class q2522 {
//    2522. 将字符串分割成值不超过 K 的子字符串
//    给你一个字符串 s ，它每一位都是 1 到 9 之间的数字组成，同时给你一个整数 k 。
//
//    如果一个字符串 s 的分割满足以下条件，我们称它是一个 好 分割：
//
//    s 中每个数位 恰好 属于一个子字符串。
//    每个子字符串的值都小于等于 k 。
//    请你返回 s 所有的 好 分割中，子字符串的 最少 数目。如果不存在 s 的 好 分割，返回 -1 。
//
//    注意：
//
//    一个字符串的 值 是这个字符串对应的整数。比方说，"123" 的值为 123 ，"1" 的值是 1 。
//    子字符串 是字符串中一段连续的字符序列。
//
//
//    示例 1：
//
//    输入：s = "165462", k = 60
//    输出：4
//    解释：我们将字符串分割成子字符串 "16" ，"54" ，"6" 和 "2" 。每个子字符串的值都小于等于 k = 60 。
//    不存在小于 4 个子字符串的好分割。
//    示例 2：
//
//    输入：s = "238182", k = 5
//    输出：-1
//    解释：这个字符串不存在好分割。
    public static void main(String[] args) {
        q2522 q2522 = new q2522();
        System.out.println(q2522.minimumPartition("165462", 60));
    }
    public int minimumPartition(String s, int k) {
        int temp = k;
        int cnt = 0;
        int ans = 0;
        while(temp > 0){
            //先行计算出k位数
            temp /= 10;
            cnt++;
        }
        int i = 0;
        int n = s.length();
        while(i < n){
            int x = 0;
            /*贪心，直接取出字符串中的对应k的位数长度的数字
            字符串中多取一位肯定比k大，少取一位便有可能不是最优解*/
            for(int j = i; j < n && j < i + cnt; j++){
                x = x * 10 + (s.charAt(j) - '0');
            }
            if(x <= k){
                //理想情况，答案加一，游标i加k的位数长度
                ans++;
                i += cnt;
            }else if(x > k && cnt == 1){
                // 只有k为个位数的情况且x > k才返回-1
                return -1;
            }else{
                //x > k,但是k不是个位数，那么x少取一位即可，即游标i的位置移动 cnt - 1
                ans++;
                i += cnt - 1;
            }
        }
        return ans;
    }
}
